type Sub record {
    id : nat,
    chain_id : nat,
    contract_addr : text,
    method_name : text,
    method_abi : text,
    frequency : nat,
    is_random : bool,
}

type Result = variant { Ok : text; Err : text };
type Error = variant { Ok : null; Err : text };
type GetSubsResult = variant { Ok : vec Sub; Err : text };

service : {
    // controllers
    get_controllers : () -> (vec principal);
    update_tx_fee : (tx_fee: nat) -> (Error);

    // chains
    add_chain : (chain_id: nat, rpc: text, min_balance: nat, treasurer: text) -> (Error);
    remove_chain : (chain_id: nat) -> (Error);
    update_chain_rpc : (chain_id: nat, rpc: text) -> (Error);
    update_chain_min_balance : (chain_id: nat, min_balance: nat) -> (Error);
    update_chain_native_price : (chain_id: nat, native_price: nat) -> (Error);
    get_chain_rpc : (chain_id: nat) -> (Result);

    // subs
    subscribe : (
        chain_id: nat,
        contract_addr: text,
        method_abi: text,
        frequency: nat,
        is_random: bool,
        msg: text,
        sig: text,
    ) -> (Error);
    get_subs : (pub_key : text) -> (GetSubsResult);
    refresh_subs : (chain_id: nat, msg: text, sig: text) -> (Error);

    // users
    add_user : (msg: text, sig: text) -> (Result);
}
